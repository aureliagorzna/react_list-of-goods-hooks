{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","goods","visibleGoods","ALPHABETICAL","sort","LENGTH","a","b","length","reverse","getReorderedGoods","updateSortType","newSortType","className","type","onClick","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gBAAAA,E,4BAAAA,E,SAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAzBD,SAA2BA,EAA3B,GACsC,IAAzCJ,EAAwC,EAAxCA,SAAUE,EAA8B,EAA9BA,WAENG,EAAY,YAAOD,GAEzB,OAAQJ,GACN,KAAKL,EAASW,aACZD,EAAaE,OACb,MAEF,KAAKZ,EAASa,OACZH,EAAaE,MAAK,SAACE,EAAWC,GAAZ,OAA0BD,EAAEE,OAASD,EAAEC,UAO7D,OAAOT,EAAaG,EAAaO,UAAYP,EAO/BQ,CAAkBjB,EAAiB,CAAEI,WAAUE,eAEvDY,EAAiB,SAACC,GACtBd,EAAYc,IAYd,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWhB,IAAaL,EAASW,aAC7B,iBACA,0BACJY,QAAS,kBAAMJ,EAAenB,EAASW,eALzC,iCAUA,wBACEW,KAAK,SACLD,UAAWhB,IAAaL,EAASa,OAC7B,oBACA,6BACJU,QAAS,kBAAMJ,EAAenB,EAASa,SALzC,4BAUA,wBACES,KAAK,SACLD,UAAWd,EACP,oBACA,6BACJgB,QArCQ,WACdf,GAAeD,IA+BX,qBAUCF,IAAaL,EAASI,MAAQG,EAE3B,wBACEe,KAAK,SACLD,UAAU,4BACVE,QA3CE,WACZjB,EAAYN,EAASI,MACrBI,GAAc,IAsCN,mBAQA,QAGN,6BACE,6BACGC,EAAMe,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAAoBA,eClHhCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8ffa1ccc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  LENGTH = 'length',\n  ALPHABETICAL = 'alphabetical',\n  NONE = '',\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(goods: string[],\n  { sortType, isReversed }: ReorderOptions) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABETICAL:\n      visibleGoods.sort();\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((a: string, b: string) => a.length - b.length);\n      break;\n\n    default:\n      break;\n  }\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  const updateSortType = (newSortType: SortType) => {\n    setSortType(newSortType);\n  };\n\n  const reverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortType === SortType.ALPHABETICAL\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={() => updateSortType(SortType.ALPHABETICAL)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortType === SortType.LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={() => updateSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReversed\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {sortType !== SortType.NONE || isReversed\n          ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )\n          : null}\n\n      </div>\n      <ul>\n        <ul>\n          {goods.map(item => (\n            <li data-cy=\"Good\">{item}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}